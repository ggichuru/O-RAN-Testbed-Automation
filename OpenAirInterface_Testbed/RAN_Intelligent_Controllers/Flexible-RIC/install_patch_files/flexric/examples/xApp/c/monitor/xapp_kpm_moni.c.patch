diff --git a/examples/xApp/c/monitor/xapp_kpm_moni.c b/examples/xApp/c/monitor/xapp_kpm_moni.c
index 5fa00cc2..9fa57e8b 100644
--- a/examples/xApp/c/monitor/xapp_kpm_moni.c
+++ b/examples/xApp/c/monitor/xapp_kpm_moni.c
@@ -32,6 +32,8 @@
 #include <signal.h>
 #include <pthread.h>
 
+bool run_forever = true;
+
 static
 uint64_t const period_ms = 1000;
 
@@ -95,6 +97,16 @@ void log_int_value(byte_array_t name, meas_record_lst_t meas_record)
     printf("DRB.PdcpSduVolumeDL = %d [kb]\n", meas_record.int_val);
   } else if (cmp_str_ba("DRB.PdcpSduVolumeUL", name) == 0) {
     printf("DRB.PdcpSduVolumeUL = %d [kb]\n", meas_record.int_val);
+  } else if (cmp_str_ba("N_RSRP_MEAS", name) == 0) {
+    printf("N_RSRP_MEAS = %d\n", meas_record.int_val);
+  } else if (cmp_str_ba("N_PRB", name) == 0) {
+    printf("N_PRB = %d\n", meas_record.int_val);
+  } else if (cmp_str_ba("RAW_RSSI", name) == 0) {
+    printf("RAW_RSSI = %d\n", meas_record.int_val);
+  } else if (cmp_str_ba("UL_RSSI", name) == 0) {
+    printf("UL_RSSI = %d\n", meas_record.int_val);
+  } else if (cmp_str_ba("CQI", name) == 0) {
+    printf("CQI = %d\n", meas_record.int_val);
   } else {
     printf("Measurement Name not yet supported\n");
   }
@@ -109,6 +121,14 @@ void log_real_value(byte_array_t name, meas_record_lst_t meas_record)
     printf("DRB.UEThpDl = %.2f [kbps]\n", meas_record.real_val);
   } else if (cmp_str_ba("DRB.UEThpUl", name) == 0) {
     printf("DRB.UEThpUl = %.2f [kbps]\n", meas_record.real_val);
+  } else if (cmp_str_ba("RSRP", name) == 0) {
+    printf("RSRP = %.2f [dBm]\n", meas_record.real_val);
+  } else if (cmp_str_ba("RSRQ", name) == 0) {
+    printf("RSRQ = %.2f [dB]\n", meas_record.real_val);
+  } else if (cmp_str_ba("PUSCH_SNR", name) == 0) {
+    printf("PUSCH_SNR = %.2f [dB]\n", meas_record.real_val);
+  } else if (cmp_str_ba("PUCCH_SNR", name) == 0) {
+    printf("PUCCH_SNR = %.2f [dB]\n", meas_record.real_val);
   } else {
     printf("Measurement Name not yet supported\n");
   }
@@ -418,6 +438,8 @@ int main(int argc, char* argv[])
   ////////////
 
   sleep(10);
+  while (run_forever)
+    sleep(10);
 
   for (int i = 0; i < nodes.len; ++i) {
     // Remove the handle previously returned
