diff --git a/examples/xApp/c/monitor/xapp_kpm_moni.c b/examples/xApp/c/monitor/xapp_kpm_moni.c
index d9f11118..bc155779 100644
--- a/examples/xApp/c/monitor/xapp_kpm_moni.c
+++ b/examples/xApp/c/monitor/xapp_kpm_moni.c
@@ -88,13 +88,16 @@ static
 void log_int_value(byte_array_t name, meas_record_lst_t meas_record)
 {
   if (cmp_str_ba("RRU.PrbTotDl", name) == 0) {
-    printf("RRU.PrbTotDl = %d [PRBs]\n", meas_record.int_val);
+    printf("RRU.PrbTotDl = %u [PRBs]\n", meas_record.int_val);
   } else if (cmp_str_ba("RRU.PrbTotUl", name) == 0) {
-    printf("RRU.PrbTotUl = %d [PRBs]\n", meas_record.int_val);
+    printf("RRU.PrbTotUl = %u [PRBs]\n", meas_record.int_val);
   } else if (cmp_str_ba("DRB.PdcpSduVolumeDL", name) == 0) {
-    printf("DRB.PdcpSduVolumeDL = %d [kb]\n", meas_record.int_val);
+    printf("DRB.PdcpSduVolumeDL = %u [kb]\n", meas_record.int_val);
   } else if (cmp_str_ba("DRB.PdcpSduVolumeUL", name) == 0) {
-    printf("DRB.PdcpSduVolumeUL = %d [kb]\n", meas_record.int_val);
+    printf("DRB.PdcpSduVolumeUL = %u [kb]\n", meas_record.int_val);
+  // Added int metrics for KPM research:
+  } else if (cmp_str_ba("RSRP.Count", name) == 0) {
+    printf("RSRP.Count = %u\n", meas_record.int_val);
   } else {
     printf("Measurement Name not yet supported\n");
   }
@@ -109,6 +112,9 @@ void log_real_value(byte_array_t name, meas_record_lst_t meas_record)
     printf("DRB.UEThpDl = %.2f [kbps]\n", meas_record.real_val);
   } else if (cmp_str_ba("DRB.UEThpUl", name) == 0) {
     printf("DRB.UEThpUl = %.2f [kbps]\n", meas_record.real_val);
+  // Added float metrics for KPM research:
+  } else if (cmp_str_ba("RSRP.Mean", name) == 0) {
+    printf("RSRP.Mean = %.2f [dBm]\n", meas_record.real_val);
   } else {
     printf("Measurement Name not yet supported\n");
   }
@@ -196,7 +202,6 @@ void sm_cb_kpm(sm_ag_if_rd_t const* rd)
 
       // log measurements
       log_kpm_measurements(&msg_frm_3->meas_report_per_ue[i].ind_msg_format_1);
-      
     }
     counter++;
   }
@@ -382,7 +387,7 @@ int main(int argc, char* argv[])
 
   assert(nodes.len > 0);
 
-  printf("Connected E2 nodes = %d\n", nodes.len);
+  printf("Connected E2 nodes = %u\n", nodes.len);
 
   pthread_mutexattr_t attr = {0};
   int rc = pthread_mutex_init(&mtx, &attr);
